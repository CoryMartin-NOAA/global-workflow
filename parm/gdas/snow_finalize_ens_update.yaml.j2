copy:
######################################
# copy analyses to directories
######################################
{% for mem in range(1, NMEM_ENS + 1) %}
    # define variables
    # Declare a dict of search and replace terms to run on each template
    {% set tmpl_dict = {'ROTDIR':ROTDIR,
                        'RUN':RUN,
                        'YMD':current_cycle | to_YMD ,
                        'HH':current_cycle | strftime("%H"),
                        'MEMDIR':"mem" + '%03d' % mem} %}

    # Replace template variables with tmpl_dict, one key at a time
    # This must be done in a namespace to overcome jinja scoping
    #  Variables set inside of a for loop are lost at the end of the loop
    #  unless they are part of a namespace
    {% set com_ns = namespace(COMOUT_SNOW_ANALYSIS_MEM = COM_SNOW_ANALYSIS_TMPL) %}

    {% for key in tmpl_dict.keys() %}
        {% set search_term = '${' + key + '}' %}
        {% set replace_term = tmpl_dict[key] %}
        {% set com_ns.COMOUT_SNOW_ANALYSIS_MEM = com_ns.COMOUT_SNOW_ANALYSIS_MEM.replace(search_term, replace_term) %}
    {% endfor %}
    {% for tile in range(1, ntiles+1) %}
- ["{{ DATA }}/anl/mem{{ '%03d' % mem }}/{{ current_cycle | to_fv3time }}.sfc_data.tile{{ tile }}.nc", "{{ com_ns.COMOUT_SNOW_ANALYSIS_MEM }}/{{ current_cycle | to_fv3time }}.sfc_data.tile{{ tile }}.nc"]
    {% endfor %}
    {% if DOIAU == True %}
        # if using IAU, also need analyses copied at the beginning of the window
        {% for tile in range(1, ntiles+1) %}
- ["{{ DATA }}/anl/mem{{ '%03d' % mem }}/{{ SNOW_WINDOW_BEGIN | to_fv3time }}.sfc_data.tile{{ tile }}.nc", "{{ com_ns.COMOUT_SNOW_ANALYSIS_MEM }}/{{ SNOW_WINDOW_BEGIN | to_fv3time }}.sfc_data.tile{{ tile }}.nc"]
        {% endfor %}
    {% endif %}
{% endfor %}
######################################
# copy ensemble mean increment to COM
######################################
# define variables
# Declare a dict of search and replace terms to run on each template
{% set tmpl_dict = {'ROTDIR':ROTDIR,
                    'RUN':RUN,
                    'YMD':current_cycle | to_YMD ,
                    'HH':current_cycle | strftime("%H"),
                    'MEMDIR':"ensstat"} %}

# Replace template variables with tmpl_dict, one key at a time
# This must be done in a namespace to overcome jinja scoping
#  Variables set inside of a for loop are lost at the end of the loop
#  unless they are part of a namespace
{% set com_ns = namespace(COMOUT_SNOW_ANALYSIS_MEM = COM_SNOW_ANALYSIS_TMPL) %}

{% for key in tmpl_dict.keys() %}
    {% set search_term = '${' + key + '}' %}
    {% set replace_term = tmpl_dict[key] %}
    {% set com_ns.COMOUT_SNOW_ANALYSIS_MEM = com_ns.COMOUT_SNOW_ANALYSIS_MEM.replace(search_term, replace_term) %}
{% endfor %}
{% for tile in range(1, ntiles+1) %}
- ["{{ DATA }}/inc/ensmean/snowinc.{{ current_cycle | to_fv3time }}.sfc_data.tile{{ tile }}.nc", "{{ com_ns.COMOUT_SNOW_ANALYSIS_MEM }}/snowinc.{{ current_cycle | to_fv3time }}.sfc_data.tile{{ tile }}.nc"]
{% endfor %}
{% if DOIAU == True %}
    # if using IAU, also need increment copied at the beginning of the window
    {% for tile in range(1, ntiles+1) %}
- ["{{ DATA }}/inc/ensmean/snowinc.{{ SNOW_WINDOW_BEGIN | to_fv3time }}.sfc_data.tile{{ tile }}.nc", "{{ com_ns.COMOUT_SNOW_ANALYSIS_MEM }}/snowinc.{{ SNOW_WINDOW_BEGIN | to_fv3time }}.sfc_data.tile{{ tile }}.nc"]
    {% endfor %}
{% endif %}
